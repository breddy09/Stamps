bin\sc -u robcruz -k 0e60dbc9-5bbf-425a-988b-f81c42d6b7ef --no-remove-colliding-tunnels --tunnel-identifier robs_mac
./bin/sc -u robcruz -k 0e60dbc9-5bbf-425a-988b-f81c42d6b7ef --no-remove-colliding-tunnels --tunnel-identifier robs_mac


    # def sauce_edge
    #   caps = Selenium::WebDriver::Remote::Capabilities.edge
    #   caps['platform'] = 'Windows 10'
    #   caps['version'] = '16.16299'
    #   client = Selenium::WebDriver::Remote::Http::Default.new
    #   client.timeout = 180
    #
    #   Watir::Browser.new :remote, { desired_capabilities: caps, http_client: client, url: sauce_endpoint }
    # end
    #
    # def capabilities(device)
    #   case device
    #   when :macos_safari
    #     capabilities_config = {
    #         :version => '11.0',
    #         :platform => 'macOS 10.13',
    #         :name => "#{SdcEnv.scenario.feature.name} - #{SdcEnv.scenario.name}"
    #     }
    #     browser = :safari
    #
    #   when :macos_chrome
    #     capabilities_config = {
    #         :version => '54.0',
    #         :platform => 'macOS 10.13',
    #         :name => "#{SdcEnv.scenario.feature.name} - #{SdcEnv.scenario.name}"
    #     }
    #     browser = :chrome
    #
    #   when :temp_device
    #     capabilities_config = {
    #         :version => '16.16299',
    #         :platform => 'Windows 10',
    #         :name => "#{SdcEnv.scenario.feature.name} - #{SdcEnv.scenario.name}"
    #     }
    #     browser = :edge
    #   else
    #     message = "Unsupported device. DEVICE=#{device}"
    #     error = ArgumentError
    #     raise error, message
    #   end
    #
    #   build_name = ENV['JENKINS_BUILD_NUMBER'] || ENV['SAUCE_BAMBOO_BUILDNUMBER'] || ENV['SAUCE_TC_BUILDNUMBER'] || ENV['SAUCE_BUILD_NAME']
    #   capabilities_config[:build] = build_name unless build_name.nil?
    #   Selenium::WebDriver::Remote::Capabilities.send(browser, capabilities_config)
    # end
    #
    # def win10_edge_sauce
    #   capabilities_config = {
    #       :version => '16.16299',
    #       :platform => 'Windows 10',
    #       :name => "#{SdcEnv.scenario.feature.name} - #{SdcEnv.scenario.name}"
    #   }
    #
    #   build_name = ENV['JENKINS_BUILD_NUMBER'] || ENV['SAUCE_BAMBOO_BUILDNUMBER'] || ENV['SAUCE_TC_BUILDNUMBER'] || ENV['SAUCE_BUILD_NAME']
    #   capabilities_config[:build] = build_name unless build_name.nil?
    #   caps = Selenium::WebDriver::Remote::Capabilities.send(:edge, capabilities_config)
    #
    #   client = Selenium::WebDriver::Remote::Http::Default.new
    #   client.timeout = 120
    #
    #   Watir::Browser.new(:remote, { desired_capabilities: caps, http_client: client, url: sauce_endpoint })
    # end
    #
    # def macos_chrome_sauce
    #   capabilities_config = {
    #       :version => '65.0',
    #       :platform => 'macOS 10.13',
    #       :name => "#{SdcEnv.scenario.feature.name} - #{SdcEnv.scenario.name}"
    #   }
    #
    #   build_name = ENV['JENKINS_BUILD_NUMBER'] || ENV['SAUCE_BAMBOO_BUILDNUMBER'] || ENV['SAUCE_TC_BUILDNUMBER'] || ENV['SAUCE_BUILD_NAME']
    #   capabilities_config[:build] = build_name unless build_name.nil?
    #   caps = Selenium::WebDriver::Remote::Capabilities.send(:chrome, capabilities_config)
    #
    #   client = Selenium::WebDriver::Remote::Http::Default.new
    #   client.timeout = 120
    #
    #   Watir::Browser.new(:remote, { desired_capabilities: caps, http_client: client, url: sauce_endpoint })
    # end

    # def iphonex_sauce
    #   desired_caps = {
    #       caps: {
    #           appiumVersion: '1.7.2',
    #           deviceName:    'iPhone X Simulator',
    #           deviceOrientation: 'portrait',
    #           platformVersion: '11.2',
    #           platformName:  'iOS',
    #           browserName: 'Safari',
    #           name: "#{SdcEnv.scenario.feature.name} - #{SdcEnv.scenario.name}"
    #       },
    #       appium_lib: {
    #           sauce_username:   'robcruz', #nil, # don't run on Sauce
    #           sauce_access_key: '0e60dbc9-5bbf-425a-988b-f81c42d6b7ef', #nil,
    #           wait: 120
    #       }
    #   }
    #
    #   Appium::Driver.new(desired_caps, false).start_driver
    # end

    # def samsung_galaxy_sauce
    #   desired_caps = {
    #       caps: {
    #           appiumVersion: '1.7.2',
    #           deviceName:    'Samsung Galaxy S8 GoogleAPI Emulator',
    #           deviceOrientation: 'portrait',
    #           platformVersion: '7.1',
    #           platformName:  'Android',
    #           browserName: 'Chrome',
    #           name: "test name"
    #       },
    #       appium_lib: {
    #           sauce_username:   nil, # don't run on Sauce 'robcruz',
    #           sauce_access_key: nil, # '0e60dbc9-5bbf-425a-988b-f81c42d6b7ef', #
    #           wait: 120
    #       }
    #   }
    #
    #   Appium::Driver.new(desired_caps, false).start_driver
    # end

